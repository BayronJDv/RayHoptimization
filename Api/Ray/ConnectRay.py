import ray
import time

def initialize_ray_cluster():
    """
    Inicializa el cluster de Ray con reintentos autom√°ticos.
    
    Esta funci√≥n intenta conectarse al cluster de Ray hasta 10 veces,
    esperando 5 segundos entre cada intento. Si no puede conectarse
    despu√©s de todos los intentos, lanza una excepci√≥n.
    
    Raises:
        RuntimeError: Si no se puede conectar al cluster despu√©s de los reintentos m√°ximos
    
    Returns:
        None
    """
    max_retries = 10
    retry_delay = 5
    
    print("Inicializando conexi√≥n con el cluster de Ray...")
    
    for attempt in range(1, max_retries + 1):
        try:
            print(f"Intento {attempt}/{max_retries}: Conectando al cluster de Ray...")
            ray.init(address="auto", ignore_reinit_error=True)
            print("‚úÖ Conexi√≥n exitosa con el cluster de Ray")
            return
            
        except ConnectionError as e:
            print(f"‚ùå Error de conexi√≥n (intento {attempt}/{max_retries}): {str(e)}")
            
            if attempt < max_retries:
                print(f"‚è≥ Esperando {retry_delay} segundos antes del siguiente intento...")
                time.sleep(retry_delay)
            else:
                print("üí• Se agotaron todos los intentos de conexi√≥n")
                
        except Exception as e:
            print(f"‚ùå Error inesperado (intento {attempt}/{max_retries}): {str(e)}")
            
            if attempt < max_retries:
                print(f"‚è≥ Esperando {retry_delay} segundos antes del siguiente intento...")
                time.sleep(retry_delay)
            else:
                print("üí• Se agotaron todos los intentos de conexi√≥n")
    
    # Si llegamos aqu√≠, significa que todos los intentos fallaron
    error_msg = f"No se pudo conectar al cluster de Ray despu√©s de {max_retries} intentos"
    print(f"üö® {error_msg}")
    raise RuntimeError(error_msg)